import requests
import pandas as pd
import numpy as np
from datetime import datetime

BINANCE_URL = "https://api.binance.com/api/v3/klines"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance
def fetch_binance_data(symbol):
    try:
        params = {
            "symbol": symbol,
            "interval": "15m",
            "limit": 100
        }
        response = requests.get(BINANCE_URL, params=params)
        data = response.json()
        df = pd.DataFrame(data, columns=[
            "open_time", "open", "high", "low", "close", "volume",
            "close_time", "quote_asset_volume", "number_of_trades",
            "taker_buy_base", "taker_buy_quote", "ignore"])
        df["close"] = df["close"].astype(float)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {symbol}: {e}")
        return None

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0.0).rolling(window=period).mean()
    loss = -delta.where(delta < 0, 0.0).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calculate_ema(prices, span):
    return prices.ewm(span=span, adjust=False).mean()

def calculate_macd(prices):
    ema12 = calculate_ema(prices, 12)
    ema26 = calculate_ema(prices, 26)
    macd_line = ema12 - ema26
    signal_line = calculate_ema(macd_line, 9)
    histogram = macd_line - signal_line
    return macd_line, signal_line, histogram

# –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞
def analyze_symbol(symbol):
    df = fetch_binance_data(symbol)
    if df is None or df.shape[0] < 14:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

    closes = df["close"]

    rsi = calculate_rsi(closes).iloc[-1]
    macd, signal, hist = calculate_macd(closes)
    macd_val = macd.iloc[-1]
    signal_val = signal.iloc[-1]
    hist_val = hist.iloc[-1]

    ema12 = calculate_ema(closes, 12).iloc[-1]
    ema26 = calculate_ema(closes, 26).iloc[-1]

    trend = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if ema12 > ema26 else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"

    recommendation = "–î–µ—Ä–∂–∞—Ç—å"
    if rsi < 35:
        recommendation = "–ü–æ–∫—É–ø–∞—Ç—å (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)"
    elif rsi > 70:
        recommendation = "–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)"

    return (f"üìä {symbol}\n"
            f"–¶–µ–Ω–∞: {closes.iloc[-1]:.4f}\n"
            f"RSI: {rsi:.2f}\n"
            f"MACD: {macd_val:.4f} | –°–∏–≥–Ω–∞–ª: {signal_val:.4f} | –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {hist_val:.4f}\n"
            f"EMA12: {ema12:.4f} | EMA26: {ema26:.4f}\n"
            f"–¢—Ä–µ–Ω–¥: {trend}\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}\n")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
def generate_report():
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "JTOUSDT", "ADAUSDT", "PEPEUSDT"]
    report = [analyze_symbol(symbol) for symbol in symbols]
    return "\n".join(report)

# –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
if __name__ == "__main__":
    print(generate_report())

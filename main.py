import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

COINGECKO_CHART_URL = "https://api.coingecko.com/api/v3/coins/{id}/market_chart"
TELEGRAM_TOKEN = "7648757274:AAFtd6ZSR8woBGkcQ7NBOPE559zHwdH65Cw"
CHAT_IDS = ["6220574513", "788954480"]

SYMBOL_TO_COINGECKO_ID = {
    "BTCUSDT": "bitcoin",
    "ETHUSDT": "ethereum",
    "SOLUSDT": "solana",
    "JTOUSDT": "jito",
    "ADAUSDT": "cardano",
    "PEPEUSDT": "pepe"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko (hourly)

def fetch_coingecko_data(symbol):
    try:
        coin_id = SYMBOL_TO_COINGECKO_ID.get(symbol)
        if not coin_id:
            raise ValueError("Unknown CoinGecko ID")
        url = COINGECKO_CHART_URL.format(id=coin_id)
        params = {"vs_currency": "usd", "days": "1", "interval": "hourly"}
        response = requests.get(url, params=params)
        data = response.json()
        prices = data.get("prices", [])
        if not prices or len(prices) < 14:
            raise ValueError("Not enough CoinGecko data")
        df = pd.DataFrame(prices, columns=["timestamp", "close"])
        df["close"] = df["close"].astype(float)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ CoinGecko {symbol}: {e}")
        return generate_dummy_data()

# –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

def generate_dummy_data():
    closes = [2 + 0.01 * np.sin(i / 3.0) for i in range(100)]
    return pd.DataFrame({"close": closes})

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0.0).rolling(window=period).mean()
    loss = -delta.where(delta < 0, 0.0).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def calculate_ema(prices, span):
    return prices.ewm(span=span, adjust=False).mean()

def calculate_macd(prices):
    ema12 = calculate_ema(prices, 12)
    ema26 = calculate_ema(prices, 26)
    macd_line = ema12 - ema26
    signal_line = calculate_ema(macd_line, 9)
    histogram = macd_line - signal_line
    return macd_line, signal_line, histogram

# –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ RSI

def analyze_symbol(symbol):
    df = fetch_coingecko_data(symbol)
    if df is None or df.shape[0] < 14:
        return None

    closes = df["close"]

    rsi = calculate_rsi(closes).iloc[-1]
    macd, signal, hist = calculate_macd(closes)
    macd_val = macd.iloc[-1]
    signal_val = signal.iloc[-1]
    hist_val = hist.iloc[-1]

    ema12 = calculate_ema(closes, 12).iloc[-1]
    ema26 = calculate_ema(closes, 26).iloc[-1]

    trend = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if ema12 > ema26 else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"

    recommendation = "–î–µ—Ä–∂–∞—Ç—å"
    if rsi < 35:
        recommendation = "–ü–æ–∫—É–ø–∞—Ç—å (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)"
    elif rsi > 70:
        recommendation = "–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)"

    if rsi < 35 or rsi > 70:
        return (f"üìä {symbol}\n"
                f"–¶–µ–Ω–∞: {closes.iloc[-1]:.4f}\n"
                f"RSI: {rsi:.2f}\n"
                f"MACD: {macd_val:.4f} | –°–∏–≥–Ω–∞–ª: {signal_val:.4f} | –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {hist_val:.4f}\n"
                f"EMA12: {ema12:.4f} | EMA26: {ema26:.4f}\n"
                f"–¢—Ä–µ–Ω–¥: {trend}\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}\n")
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ –≤–∞–∂–Ω—ã–º —Å–∏–≥–Ω–∞–ª–∞–º

def generate_report():
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "JTOUSDT", "ADAUSDT", "PEPEUSDT"]
    report = filter(None, [analyze_symbol(symbol) for symbol in symbols])
    return "\n".join(report)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram

def send_telegram_message(message):
    if not message:
        return
    for chat_id in CHAT_IDS:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": chat_id, "text": message}
        try:
            requests.post(url, json=payload)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
if __name__ == "__main__":
    report = generate_report()
    print(report)
    send_telegram_message(report)
